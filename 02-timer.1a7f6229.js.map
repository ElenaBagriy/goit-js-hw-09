{"mappings":"gfAAA,IAYIA,EAZJC,EAAAC,EAAA,S,aAKMC,EAASC,SAASC,cAAc,sBAChCC,EAAWF,SAASC,cAAc,qBAClCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBACrCI,EAAcL,SAASC,cAAc,wBAE3CF,EAAOO,UAAW,EAElB,IAAIC,EAAa,KACbC,EAAU,EAEdC,EAAAC,OAAOC,KAAK,CACVC,MAAO,QACPC,SAAU,aACVC,oBAAoB,EACpBC,cAAc,EACdC,SAAU,SAGZ,IAAMC,EAAU,CACdC,YAAY,EACZC,WAAW,EACXC,YAAa,IAAIC,KACjBC,gBAAiB,EAGjBC,QAAA,SAAQC,GACN5B,EAAe4B,EAAc,GA4BjC,WACE,IAAMC,EAAcJ,KAAKK,MAGzB,KAFqB9B,EAAe6B,EAAa,GAI/C,YADAhB,EAAAC,OAAOiB,QAAQ,sCAGjB5B,EAAOO,UAAW,C,CAnChBsB,E,GAoDJ,SAASC,EAAeC,GACtB,OAAOA,EAAMC,SAAS,EAAG,E,EAjD3B,EAAAlC,EAAAmC,SAAU,wBAAyBf,GAEnClB,EAAOkC,iBAAiB,SAExB,WACE,GAAIzB,EAAU,EACZ,OAGFD,EAAa2B,aAAY,WACvB1B,GAAW,EACX,IAuBe2B,EACXC,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EAhCElB,EAAcJ,KAAKK,MACnBkB,GAsBST,EAtBYvC,EAAe6B,EA0BtCc,EAAa,IADbD,EAAgB,IADhBD,EAAkB,IADlBD,EAAS,OAKTI,EAAOK,KAAKC,MAAMX,EAAKI,GACvBE,EAAQI,KAAKC,MAAMX,EAAMI,EAAOD,GAChCI,EAAUG,KAAKC,MAAMX,EAAOI,EAAOD,EAAQD,GAC3CM,EAAUE,KAAKC,MAAMX,EAAQI,EAAOD,EAAQD,EAAUD,GAErD,CAAEI,OAAMC,QAAOC,UAASC,YA/BzB/C,EAAgB6B,GAAgB,EAClCsB,cAAcxC,GAqCpB,SAAyByC,G,IAAER,EAAFQ,EAAER,KAAMC,EAARO,EAAQP,MAAOC,EAAfM,EAAeN,QAASC,EAAxBK,EAAwBL,QAC/CM,QAAQC,IAAI,CAACV,OAAMC,QAAOC,UAASC,YACnCzC,EAASiD,YAAc,GAAmCC,OAAhCvB,EAAeW,EAAKa,aAC9ClD,EAAUgD,YAAc,GAAoCC,OAAjCvB,EAAeY,EAAMY,aAChDjD,EAAY+C,YAAc,GAAsCC,OAAnCvB,EAAea,EAAQW,aACpDhD,EAAY8C,YAAc,GAAsCC,OAAnCvB,EAAec,EAAQU,Y,CAtClDC,CAAgBV,E,GACf,I","sources":["src/js/02-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport \"notiflix/dist/notiflix-3.2.5.min.css\";\n\nconst button = document.querySelector('button[data-start]');\nconst daysLeft = document.querySelector('.value[data-days]');\nconst hoursLeft = document.querySelector('.value[data-hours]')\nconst minutesLeft = document.querySelector('.value[data-minutes]')\nconst secondsLeft = document.querySelector('.value[data-seconds]')\n\nbutton.disabled = true;\nlet selectedDate;\nlet intervalId = null;\nlet counter = 0;\n\nNotify.init({\n  width: '400px',\n  position: 'center-top',\n  showOnlyTheLastOne: true,\n  clickToClose: true,\n  fontSize: '16px',\n});\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  \n\n  onClose(selectedDates) {\n    selectedDate = selectedDates[0];\n    checkFutureDate();\n  },\n};\n\nflatpickr('input#datetime-picker', options);\n    \nbutton.addEventListener('click', startCountdown);\n\nfunction startCountdown() {\n  if (counter > 0) {\n    return;\n  };\n\n  intervalId = setInterval(() => {\n    counter += 1;\n    const currentDate = Date.now();\n    const timeLeft = convertMs(selectedDate - currentDate);\n\n    if ((selectedDate - currentDate) <= 0) {\n      clearInterval(intervalId);\n      return;\n    }\n        \n    updateTimerFace(timeLeft);\n  }, 1000);\n}\n\nfunction checkFutureDate() {\n  const currentDate = Date.now();\n  const isFutureDate = selectedDate - currentDate >0 ? true : false;\n\n  if (!isFutureDate) {      \n    Notify.failure('Please choose a date in the future');\n    return;\n  }\n  button.disabled = false;\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n  \n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  \n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return value.padStart(2, 0);\n}\n\nfunction updateTimerFace({ days, hours, minutes, seconds }) {\n  console.log({days, hours, minutes, seconds})\n  daysLeft.textContent = `${addLeadingZero(days.toString())}`;\n  hoursLeft.textContent = `${addLeadingZero(hours.toString())}`;\n  minutesLeft.textContent = `${addLeadingZero(minutes.toString())}`;\n  secondsLeft.textContent = `${addLeadingZero(seconds.toString())}`;\n}"],"names":["$84b9dae4df53835d$var$selectedDate","$dbdyf","parcelRequire","$84b9dae4df53835d$var$button","document","querySelector","$84b9dae4df53835d$var$daysLeft","$84b9dae4df53835d$var$hoursLeft","$84b9dae4df53835d$var$minutesLeft","$84b9dae4df53835d$var$secondsLeft","disabled","$84b9dae4df53835d$var$intervalId","$84b9dae4df53835d$var$counter","$h6c0i","Notify","init","width","position","showOnlyTheLastOne","clickToClose","fontSize","$84b9dae4df53835d$var$options","enableTime","time_24hr","defaultDate","Date","minuteIncrement","onClose","selectedDates","currentDate","now","failure","$84b9dae4df53835d$var$checkFutureDate","$84b9dae4df53835d$var$addLeadingZero","value","padStart","default","addEventListener","setInterval","ms","second","minute","hour","day","days","hours","minutes","seconds","timeLeft","Math","floor","clearInterval","param","console","log","textContent","concat","toString","$84b9dae4df53835d$var$updateTimerFace"],"version":3,"file":"02-timer.1a7f6229.js.map"}